### YamlMime:Tutorial
title: Get started with cloud development using the Azure libraries for Python
metadata:
  title: Get started with Azure libraries for Python
  description: Learn how to create Azure cloud resources and connect and use them in your python applications. 
  audience: Developer
  level: Beginner
  nextTutorialHref: /python/api/overview/azure/?view=azure-python
  nextTutorialTitle: python SDK reference
  displayType: two-column
  interactive: azurecli
  ms.date: 10/18/2019
items:
- durationInMinutes: 1
  content: |
   This guide demonstrates the usage of several libraries in the Azure SDK for Python.  
- title: Prerequisites
  durationInMinutes: 5
  content: |
    - An Azure account. If you don't have one, [get a free trial](https://azure.microsoft.com/free/).
    - [The latest Python 3.x interpreter](https://www.python.org/downloads/)
    - The [Azure CLI 2.0](/azure/install-az-cli2) to work locally, or the [Azure Cloud Shell](/azure/cloud-shell/quickstart) to work exclusively on the cloud.
- title: Set up authentication
  durationInMinutes: 5
  content: |
    The SDK is able to create a client using your CLI active subscription. For production purposes, however, use [MSAL](https://github.com/AzureAD/microsoft-authentication-library-for-python) or your own credentials system.
    
    To define active credentials, use [az login](/azure/authenticate-azure-cli).
    Default subscription ID is either the only one you have, or you can define it using 
    [az account](/azure/manage-azure-subscriptions-azure-cli).

    ```python
    from azure.common.client_factory import get_client_from_cli_profile
    from azure.mgmt.compute import ComputeManagementClient

    client = get_client_from_cli_profile(ComputeManagementClient)
    ```
- title: Create a virtual environment
  durationInMinutes: 5
  content: |
    A virtual environment keeps the SDK libraries in an isolated location for your project, which makes it easy to uninstall the SDK as needed by deleting the environment folder.
    
    Create a virtual environment in Bash (Linux or [Bash for Windows](https://msdn.microsoft.com/commandline/wsl/about)):
    ```bash
    pip install virtualenv
    virtualenv mytestenv
    cd mytestenv
    source ./bin/activate
    ```

    Create a virtual environment in PowerShell:
    ```powershell
    pip install virtualenv
    virtualenv mytestenv
    cd mytestenv
    .\Scripts\activate
    ```
- title: Create a Linux virtual machine
  durationInMinutes: 5
  content: |
    This code creates a new Linux VM with name `testLinuxVM` in a resource group `sampleVmResourceGroup` running in the US East Azure region.

    Authenticate:
    ```azurecli
    az login
    ```
    Create a resource group:
    ```azurecli
    az group create -l eastus --n sampleVmResourceGroup
    ```

    Create a virtual network and subnet:
    ```azurecli
    az network vnet create -g sampleVmResourceGroup -n azure-sample-vnet --address-prefix 10.0.0.0/16 --subnet-name azure-sample-subnet --subnet-prefix 10.0.0.0/24
    ```

    Create a public IP address:
    ```azurecli
    az network public-ip create -g sampleVmResourceGroup -n azure-sample-ip --allocation-method Dynamic --version IPv4
    ```
    Create a network interface client:
    ```azurecli
    az network nic create -g sampleVmResourceGroup --vnet-name azure-sample-vnet --subnet azure-sample-subnet -n azure-sample-nic --public-ip-address azure-sample-ip
    ```

    ```python
    from azure.mgmt.network import NetworkManagementClient
    from azure.mgmt.compute import ComputeManagementClient
    from azure.common.client_factory import get_client_from_cli_profile

    # Azure Datacenter
    LOCATION = 'eastus'

    # Resource Group
    GROUP_NAME = 'sampleVmResourceGroup'

    # Network
    VNET_NAME = 'azure-sample-vnet'
    SUBNET_NAME = 'azure-sample-subnet'

    # VM
    NIC_NAME = 'azure-sample-nic'
    VM_NAME = 'testLinuxVM'

    USERNAME = 'userlogin'
    PASSWORD = 'Pa$$w0rd91'

    IP_ADDRESS_NAME='azure-sample-ip'

    VM_REFERENCE = {
        'linux': {
            'publisher': 'Canonical',
            'offer': 'UbuntuServer',
            'sku': '16.04.0-LTS',
            'version': 'latest'
        },
        'windows': {
            'publisher': 'MicrosoftWindowsServerEssentials',
            'offer': 'WindowsServerEssentials',
            'sku': 'WindowsServerEssentials',
            'version': 'latest'
        }
    }


    def run_example():

        compute_client = get_client_from_cli_profile(ComputeManagementClient)
        network_client = get_client_from_cli_profile(NetworkManagementClient)

        # get nic id
        nic = network_client.network_interfaces.get(GROUP_NAME, NIC_NAME)

        # Create Linux VM
        print('\nCreating Linux Virtual Machine')
        vm_parameters = create_vm_parameters(nic.id, VM_REFERENCE['linux'])
        print(vm_parameters)
        async_vm_creation = compute_client.virtual_machines.create_or_update(
            GROUP_NAME, VM_NAME, vm_parameters)
        async_vm_creation.wait()


    def create_vm_parameters(nic_id, vm_reference):
        """Create the VM parameters structure.
        """
        return {
            'location': LOCATION,
            'os_profile': {
                'computer_name': VM_NAME,
                'admin_username': USERNAME,
                'admin_password': PASSWORD
            },
            'hardware_profile': {
                'vm_size': 'Standard_DS1_v2'
            },
            'storage_profile': {
                'image_reference': {
                    'publisher': vm_reference['publisher'],
                    'offer': vm_reference['offer'],
                    'sku': vm_reference['sku'],
                    'version': vm_reference['version']
                },
            },
            'network_profile': {
                'network_interfaces': [{
                    'id': nic_id,
                }]
            },
        }


    if __name__ == "__main__":
        run_example()
    ```

    When the program finishes, verify the virtual machine in your subscription with the Azure CLI 2.0:

    ```azurecli
    az vm list --resource-group sampleVmResourceGroup
    ```

    Once you've verified that the code worked, use the CLI to delete the VM and its resources.

    ```azurecli
    az group delete --name sampleVmResourceGroup
    ```
- title: Deploy a web app from a GitHub repo
  durationInMinutes: 5
  content: |
    This code deploys a Flask web application from the `master` branch in a GitHub repo in to a new [Azure App Service Web App](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview) running in the free tier. 

    Before you begin: Fork https://github.com/Azure-Samples/python-docs-hello-world

    Authenticate:
    ```azurecli
    az login
    ```
    Create a resource group:
    ```azurecli
    az group create -l eastus -n sampleWebResourceGroup
    ```

    Create a free app service plan:
    ```azurecli
    az appservice plan create -g sampleWebResourceGroup -n sampleFreePlan  --sku Free
    ```

    ```python
    from azure.mgmt.web import WebSiteManagementClient
    from azure.mgmt.web.models import Site, SiteSourceControl, SiteConfig
    from azure.common.client_factory import get_client_from_cli_profile

    RESOURCE_GROUP_NAME = 'sampleWebResourceGroup'
    SERVICE_PLAN_NAME = 'sampleFreePlanName'
    WEB_APP_NAME = 'sampleflaskapp123'
    REPO_URL = 'GitHub_Repository_URL'

    #log in
    web_client = get_client_from_cli_profile(WebSiteManagementClient)

    # get service plan id
    service_plan = web_client.app_service_plans.get(RESOURCE_GROUP_NAME, SERVICE_PLAN_NAME)

    # create a web app
    siteConfiguration = SiteConfig(
        python_version='3.4',
    )
    site_async_operation = web_client.web_apps.create_or_update(
        RESOURCE_GROUP_NAME,
        WEB_APP_NAME,
        Site(
            location='eastus',
            server_farm_id=service_plan.id,
            site_config=siteConfiguration
        ),
    )

    site = site_async_operation.result()
    print('created webapp: ' + site.default_host_name)

    # continuous deployment with GitHub
    source_control_async_operation = web_client.web_apps.create_or_update_source_control(
        RESOURCE_GROUP_NAME,
        WEB_APP_NAME,
        SiteSourceControl(
            location='GitHub',
            repo_url= REPO_URL,
            branch='master'
        )
    )

    source_control = source_control_async_operation.result()
    print("added source control to: " + source_control.name + "azurewebsites.net")
    ```

    Open a browser pointed to the application using the CLI:
    ```azurecli
    az appservice web browse --resource-group sampleWebResourceGroup --name YOUR_APP_NAME
    ```

    Remove the web app and plan from your subscription once you've verified the deployment. 
    ```azurecli
    az group delete --name sampleWebResourceGroup
    ```
- title: Connect to a SQL Database
  durationInMinutes: 5
  content: |
    This code creates a new SQL Database with a firewall rule allowing remote access, and then connected to it using the Microsoft ODBC driver. Pyodbc uses the Microsoft ODBC Driver on Linux to connect to SQL Databases. 

    Authenticate:
    ```azurecli
    az login
    ```
    Create a resource group:
    ```azurecli
    az group create -l eastus -n azure-sample-group
    ```

    Create a SQL server:
    ```azurecli
    az sql server create --admin-password HusH_Sec4et --admin-user mysecretname -l eastus -n samplesqlserver123 -g azure-sample-group
    ```

    Add firewall rule:
    ```azurecli
    az sql server firewall-rule create --end-ip-address 167.220.0.235 --name firewall_rule_name_123.123.123.123 --resource-group azure-sample-group --server samplesqlserver123 --start-ip-address 123.123.123.123
    ```

    Create a SQL Database:
    ```azurecli
    az sql db create --name sample-db --resource-group azure-sample-group --server samplesqlserver123
    ```

    ```python
    from azure.mgmt.sql import SqlManagementClient
    from azure.common.client_factory import get_client_from_cli_profile
    import pyodbc

    LOCATION = 'eastus'
    GROUP_NAME = 'azure-sample-group'
    SERVER_NAME = 'samplesqlserver123'
    DATABASE_NAME = 'sample-db'
    USER_NAME ='mysecretname'
    PASSWORD='HusH_Sec4et'

    # authenticate
    sql_client = get_client_from_cli_profile(SqlManagementClient)


    def run_example():
    # Get SQL Database
    print('Get SQL Database')
    database = sql_client.databases.get(
        GROUP_NAME,
        SERVER_NAME,
        DATABASE_NAME
    )
    print(database)
    print("\n\n")


    def create_and_insert():
    server = SERVER_NAME+'.database.windows.net'
    database = DATABASE_NAME
    username = USER_NAME
    password = PASSWORD
    driver = '{ODBC Driver 13 for SQL Server}'
    cnxn = pyodbc.connect(
        'DRIVER=' + driver + ';PORT=1433;SERVER=' + server + ';PORT=1443;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = cnxn.cursor()
    tsql = "CREATE TABLE CLOUD (name varchar(255), code int);"
    tsqlInsert = "INSERT INTO CLOUD (name, code) VALUES ('Azure', 1); "
    selectValues = "SELECT * FROM CLOUD"
    with cursor.execute(tsql):
        print('Successfully created table!')
    with cursor.execute(tsqlInsert):
        print('Successfully inserted data into table')
    cursor.execute(selectValues)
    row = cursor.fetchone()
    while row:
        print(str(row[0]) + " " + str(row[1]))
        row = cursor.fetchone()
    cnxn.commit()

    if __name__ == "__main__":
    run_example()
    create_and_insert()
    ```

    Once you've verified that the code worked, use the CLI to delete the SQL Database and its resources.

    ```azurecli
    az group delete --name azure-sample-group
    ```
- title:  Write a blob into a new storage account
  durationInMinutes: 5
  content: |
    Authenticate:
    ```azurecli
    az login
    ```
    Create a resource group:
    ```azurecli
    az group create -l eastus -n sampleStorageResourceGroup
    ```

    Create a storage account:
    ```azurecli
    az storage account create -n samplestorageaccountname -g sampleStorageResourceGroup -l eastus --sku Standard_RAGRS
    ```

    This code creates an [Azure Storage account](https://docs.microsoft.com/azure/storage/storage-introduction) and then uses the Azure Storage libraries for Python to create a new html file in the cloud. 
    ```python
    from azure.storage import CloudStorageAccount
    from azure.storage.blob import PublicAccess
    from azure.storage.blob.models import ContentSettings
    from azure.common.client_factory import get_client_from_cli_profile
    from azure.mgmt.storage import StorageManagementClient

    RESOURCE_GROUP = 'sampleStorageResourceGroup'
    STORAGE_ACCOUNT_NAME = 'samplestorageaccountname'
    CONTAINER_NAME = 'samplecontainername'

    # log in
    storage_client = get_client_from_cli_profile(StorageManagementClient)

    # create a public storage container to hold the file
    storage_keys = storage_client.storage_accounts.list_keys(RESOURCE_GROUP, STORAGE_ACCOUNT_NAME)
    storage_keys = {v.key_name: v.value for v in storage_keys.keys}

    storage_client = CloudStorageAccount(STORAGE_ACCOUNT_NAME, storage_keys['key1'])
    blob_service = storage_client.create_block_blob_service()

    blob_service.create_container(CONTAINER_NAME, public_access=PublicAccess.Container)

    blob_service.create_blob_from_bytes(
        CONTAINER_NAME,
        'helloworld.html',
        b'<center><h1>Hello World!</h1></center>',
        content_settings=ContentSettings('text/html')
    )

    print(blob_service.make_blob_url(CONTAINER_NAME, 'helloworld.html'))
    ```
    To verify content successfully uploaded, navigate to the URL printed. 

    Clean up the storage account using the CLI:
    ```azurecli
    az group delete --name sampleStorageResourceGroup
    ```
- title: Next Steps
  content: |
    You've completed "Getting started with Azure libraries for python".

    - To learn more about how to use the Azure management libraries for Python to manage resources and automate tasks, see our sample code for [virtual machines](/samples/browse/?languages=python&products=azure-virtual-machines), [web apps](/samples/browse/?languages=python&products=azure-functions%2Cazure-app-service%2Cazure-logic-apps) and [SQL Database](/samples/browse/?languages=python&products=azure-cosmos-db%2Cazure-sql-database).

    - A [reference](/python/api/overview/azure/?view=azure-python) is available for all packages.
